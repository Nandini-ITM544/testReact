[{"/Users/nandini/Desktop/testReact/my-app/src/reportWebVitals.js":"1","/Users/nandini/Desktop/testReact/my-app/src/footer.js":"2","/Users/nandini/Desktop/testReact/my-app/src/search.js":"3","/Users/nandini/Desktop/testReact/my-app/src/App.js":"4","/Users/nandini/Desktop/testReact/my-app/src/cityTemperature.js":"5","/Users/nandini/Desktop/testReact/my-app/src/weatherInformation.js":"6","/Users/nandini/Desktop/testReact/my-app/src/index.js":"7","/Users/nandini/Desktop/testReact/my-app/src/forecast.js":"8","/Users/nandini/Desktop/testReact/my-app/src/FormattedDate.js":"9","/Users/nandini/Desktop/testReact/my-app/src/WeatherIcon.js":"10","/Users/nandini/Desktop/testReact/my-app/src/WeatherTemperature.js":"11","/Users/nandini/Desktop/testReact/my-app/src/ForeCastElement.js":"12","/Users/nandini/Desktop/testReact/my-app/src/weathertext.js":"13"},{"size":362,"mtime":1606406663313,"results":"14","hashOfConfig":"15"},{"size":294,"mtime":1606863508326,"results":"16","hashOfConfig":"15"},{"size":3954,"mtime":1607716387295,"results":"17","hashOfConfig":"15"},{"size":380,"mtime":1607108744123,"results":"18","hashOfConfig":"15"},{"size":969,"mtime":1606407508655,"results":"19","hashOfConfig":"15"},{"size":600,"mtime":1607706601571,"results":"20","hashOfConfig":"15"},{"size":536,"mtime":1606862962437,"results":"21","hashOfConfig":"15"},{"size":1142,"mtime":1607716418063,"results":"22","hashOfConfig":"15"},{"size":509,"mtime":1606945115879,"results":"23","hashOfConfig":"15"},{"size":728,"mtime":1607704099714,"results":"24","hashOfConfig":"15"},{"size":5219,"mtime":1607710337549,"results":"25","hashOfConfig":"15"},{"size":874,"mtime":1607712727107,"results":"26","hashOfConfig":"15"},{"size":454,"mtime":1607702532184,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1crm7wt",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"/Users/nandini/Desktop/testReact/my-app/src/reportWebVitals.js",[],"/Users/nandini/Desktop/testReact/my-app/src/footer.js",["58"],"import React from \"react\";\nimport \"./footer.css\";\nexport default function Footer() {\n  return (\n    <footer>\n      <p>\n        <a href='https://github.com/Nandini-ITM544/testReact' target='_blank'>\n          Open source code\n        </a>{\" \"}\n        by Nandini\n      </p>\n    </footer>\n  );\n}\n","/Users/nandini/Desktop/testReact/my-app/src/search.js",["59"],"/Users/nandini/Desktop/testReact/my-app/src/App.js",["60","61"],"/Users/nandini/Desktop/testReact/my-app/src/cityTemperature.js",[],"/Users/nandini/Desktop/testReact/my-app/src/weatherInformation.js",["62","63"],"/Users/nandini/Desktop/testReact/my-app/src/index.js",[],["64","65"],"/Users/nandini/Desktop/testReact/my-app/src/forecast.js",[],"/Users/nandini/Desktop/testReact/my-app/src/FormattedDate.js",[],"/Users/nandini/Desktop/testReact/my-app/src/WeatherIcon.js",[],"/Users/nandini/Desktop/testReact/my-app/src/WeatherTemperature.js",["66"],"import React, { useState } from \"react\";\nimport FormattedDate from \"./FormattedDate\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport \"./weatherInformation.css\";\nimport Forecast from \"./forecast\";\nimport \"./forecast.css\";\n\nexport default function WeatherTemperature(props) {\n  const [unit, setUnit] = useState(\"celsius\");\n  console.log(props);\n  function converToF(event) {\n    event.preventDefault();\n    setUnit(\"fahrenheit\");\n  }\n\n  function convertToC(event) {\n    event.preventDefault();\n\n    setUnit(\"celsius\");\n  }\n\n  if (unit === \"celsius\") {\n    return (\n      <div>\n        <div>\n          <span id='temp'>{props.temp.temperature}</span>\n          <span className='symbol'>°C</span>\n\n          <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n            <label className='btn btn-secondary active' id='celsius'>\n              <input\n                type='radio'\n                name='options'\n                id='option1'\n                autocomplete='off'\n              />\n              C\n            </label>\n            <label className='btn btn-secondary' id='farenheit'>\n              <input\n                type='radio'\n                name='options'\n                id='option2'\n                autocomplete='off'\n                onClick={converToF}\n              />\n              F\n            </label>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-sm-6'>\n            <div className='card information'>\n              <div className='card-body'>\n                <p className='card-text' id='currenttime'>\n                  <FormattedDate defaultdate={props.temp.date} />\n                </p>\n\n                <p className='card-text'>\n                  Highest for the day:{\" \"}\n                  <span id='high-temp'>{props.temp.high_temp}°C</span>\n                </p>\n                <p className='card-text'>\n                  Lowest for the day:{\" \"}\n                  <span id='low-temp'>{props.temp.low_temp}°C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className='col-sm-6'>\n            <div className='card ex information'>\n              <div className='card-body'>\n                <p className='card-text'>\n                  Real Feel: <span id='real-feel'>{props.temp.realfeel}°C</span>\n                </p>\n                <p className='card-text'>\n                  Humidity: <span id='humid'>{props.temp.humidity}</span>%\n                </p>\n                <p className='card-text'>\n                  Wind: NE <span id='wind'>{props.temp.wind}</span>mph\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Forecast city={props.temp.city} units='metric' />\n      </div>\n    );\n  } else {\n    let fahrenheit = Math.round((props.temp.temperature * 9) / 5 + 32);\n    let realFeel = Math.round((props.temp.realfeel * 9) / 5 + 32);\n    let hightemp = Math.round((props.temp.high_temp * 9) / 5 + 32);\n    let lowtemp = Math.round((props.temp.low_temp * 9) / 5 + 32);\n\n    return (\n      <div>\n        <div>\n          <span id='temp'>{fahrenheit}</span>\n          <span className='symbol'>°F</span>\n          <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n            <label className='btn btn-secondary' id='celsius'>\n              <input\n                type='radio'\n                name='options'\n                id='option1'\n                autocomplete='off'\n                onClick={convertToC}\n              />\n              C\n            </label>\n            <label className='btn btn-secondary active' id='farenheit'>\n              <input\n                type='radio'\n                name='options'\n                id='option2'\n                autocomplete='off'\n              />\n              F\n            </label>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-sm-6'>\n            <div className='card information'>\n              <div className='card-body'>\n                <p className='card-text' id='currenttime'>\n                  <FormattedDate defaultdate={props.temp.date} />\n                </p>\n\n                <p className='card-text'>\n                  Highest for the day: <span id='high-temp'>{hightemp}°F</span>\n                </p>\n                <p className='card-text'>\n                  Lowest for the day: <span id='low-temp'>{lowtemp}°F</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className='col-sm-6'>\n            <div className='card ex information'>\n              <div className='card-body'>\n                <p className='card-text'>\n                  Real Feel: <span id='real-feel'>{realFeel}°F</span>\n                </p>\n                <p className='card-text'>\n                  Humidity: <span id='humid'>{props.temp.humidity}</span>%\n                </p>\n                <p className='card-text'>\n                  Wind: NE <span id='wind'>{props.temp.wind}</span>mph\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Forecast city={props.temp.city} units='Imperial' />\n      </div>\n    );\n  }\n}\n","/Users/nandini/Desktop/testReact/my-app/src/ForeCastElement.js",["67"],"/Users/nandini/Desktop/testReact/my-app/src/weathertext.js",["68","69"],"import React, { useState } from \"react\";\n\nexport default function WeatherText(props) {\n  const [unit, setUnit] = useState(\"celsius\");\n\n  if (unit === \"celsius\") {\n    return (\n      <div>\n        <span id='high-temp'>{props.data.high_temp}°C</span>\n      </div>\n    );\n  } else {\n    let fahrenheit = Math.round((props.temp * 9) / 5 + 32);\n    return (\n      <div>\n        <span id='high-temp'>{props.data.high_temp}°F</span>\n      </div>\n    );\n  }\n}\n",{"ruleId":"70","severity":1,"message":"71","line":7,"column":63,"nodeType":"72","endLine":7,"endColumn":78},{"ruleId":"73","severity":1,"message":"74","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":1,"column":8,"nodeType":"75","messageId":"76","endLine":1,"endColumn":12},{"ruleId":"73","severity":1,"message":"74","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":16},{"ruleId":"73","severity":1,"message":"78","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":21},{"ruleId":"73","severity":1,"message":"79","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":19},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"73","severity":1,"message":"84","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":19},{"ruleId":"73","severity":1,"message":"85","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"86","line":4,"column":16,"nodeType":"75","messageId":"76","endLine":4,"endColumn":23},{"ruleId":"73","severity":1,"message":"87","line":13,"column":9,"nodeType":"75","messageId":"76","endLine":13,"endColumn":19},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-unused-vars","'Forecast' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'FormattedDate' is defined but never used.","'WeatherText' is defined but never used.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"'WeatherIcon' is defined but never used.","'useState' is defined but never used.","'setUnit' is assigned a value but never used.","'fahrenheit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]